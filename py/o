#!/usr/bin/env python

#mini launcher script: codename-o (Python port)
version='2.2'
# made by syfluqs <syfluqs@gmail.com>


#importing stuff we need.
import sys,os,subprocess,thread
from terminal import *
import Tkinter as tk

#figuring out the arguement(s)
args = sys.argv[1:]

############################################################################
#declaring variables

home=os.environ['HOME']
docs=home+'/Documents/'
pics=home+'/Pictures/'
git=docs+'git/'
down=home+'/Downloads/'
todofile=home+'/.o/todo'
browser='google-chrome --audio-buffer-size=2048'
editor='gvim '
musicplayer='deadbeef --play-pause'
filebrowser='dbus-launch pcmanfm'
curlocation=os.path.abspath(__file__)
redir=' 2> /dev/null &'
out=''
cmd=''
tmp=home+'/.o/tmp'

############################################################################
# Define all functions here

def doc():
    print 'o launcher v'+version+' \nThe Python port [ at '+curlocation+'] \n\nmade by: syfluqs <syfluqs@gmail.com>'

def msg(a):
    print green(a)

def err(a):
    print red('ERROR: '+a)

def exe(s):
    #os.system(s+' &')
    try:
        os.system(s+' &')
    except OSError:
        err('No Such file or directory')

def blobby():
    os.system('blobby'+redir)
    msg('Starting Blobby volley...')

def install():
    if len(args)<2: err('Package name required.')
    else:
        ec=os.system('sudo apt-get install '+args[1])
        if ec==0: msg('Successfully installed '+args[1])

def edit():
    if len(args)<2:
        os.system(editor+curlocation+redir)
    else:
        os.system(editor+args[1]+redir)

def internet():
    #defining a dict of bookmarks
    bookmarks = {
    'git':'https://github.com',
    'i':'--incognito',
    'cc':'http://www.codecademy.com',
    'router':'http://192.168.2.1/cgi-bin/status_deviceinfo.asp'
    }
    #checking sub-arguement.
    if len(args)<2:
        exe(browser)
    else:
        subarg=' '.join(args[1:])
        if subarg in bookmarks:
            exe(browser+" "+bookmarks[subarg])
        else:
            exe(browser+" \'https://www.google.co.in/search?q="+subarg+'\'')

def checkX():
    if os.path.isfile('/tmp/.X0-lock'):
        msg('X is running, falling back...')
    else:
        msg('X is not running. Starting it...')
        exe('startx')

def files():
    bookmarks = {
    'down':down,
    'docs':docs,
    'pics':pics,
    'git':git
    }
    #checking subarg
    if len(args)<2:
        exe(filebrowser)
    else:
        subarg=args[1]
        if subarg in bookmarks:
            exe(filebrowser+" "+bookmarks[subarg])
        else:
            exe(filebrowser+" "+subarg)

def bluetooth():
    exe('bluetooth-applet'+redir)
    exe('bluetooth-sendto'+redir)

def music():
    exe(musicplayer)

def getnetusage():
    p = subprocess.Popen(['sudo','ifconfig','eth0'],stdout=subprocess.PIPE)
    for line in p.stdout:
        if "RX bytes" in line:
            l = line.split()
            down = float(l[1].split(':')[1])
            up = float(l[5].split(':')[1])
            total=round((up+down)/1000000,2)
            print str(total),'MiB'

def netmon():
    def update_timeText():
        p = subprocess.Popen(['o','neus'],stdout=subprocess.PIPE)
        current = p.stdout.read()
        timeText.configure(text=current)
        root.after(1000, update_timeText)
  
    root = tk.Tk()
    root.wm_title("NetMon")
    timeText = tk.Label(root, text="", font=("DS-Digital", 22))
    timeText.grid()
    update_timeText()
    root.mainloop()
    #thread.start_new_thread(netmon, ()) 

def netmon_extr():
    os.system(curlocation+' fnetmon &')

def router_status():
    user = 'admin'
    password = 'IIgdifsbi8 - router'
    address = 'http://192.168.2.1/cgi-bin/status_deviceinfo.asp'
    auth_method = '-digest'
    extras = '--silent'
    
    print colorize('Connecting...','#FFAA00')
    p = subprocess.Popen('curl '+extras+' -u '+'\''+user+':'+password+'\' '+address+' '+auth_method+' | w3m -dump -T text/html',shell=True,stdout=subprocess.PIPE)
    
    for i in p.stdout:
        if 'Status' in i:
            print colorize(i.split()[0]+' : ','#00FF00'),colorize(' '.join(i.split()[1:]),'#FFFFFF')
        elif 'Line State' in i:
            print colorize(i.split()[0]+' '+i.split()[1]+' : ','#00FF00'),colorize(i.split()[2],'#FFFFFF')

############################################################################
# the cmdlist
# is is an index of the arguements to their respective functions
# o checks if the arg is in cmdlist and runs the respective function
# if not present, o will pass it on to os.system

cmdlist = {
   'blby':'blobby()',
   'i':'install()',
   'e':'edit()',
   'gc':'internet()',
   's':'checkX()',
   'f':'files()',
   'bsend':'bluetooth()',
   'm':'music()',
   'neus':'getnetusage()',
   'neon':'os.system(\'sudo ifconfig eth0 up\')',
   'neof':'os.system(\'sudo ifconfig eth0 down\')',
   'list':'print cmdlist',
   'netmon':'netmon_extr()',
   'c':'os.system(\'clear\')',
   'rstat':'router_status()',
   'lk':'exe(\'xtrlock\')',
   'ff':'exe(\'/home/knoppix/scripts/firefox/firefox/firefox\')',

############ fakes
   'fnetmon':'netmon()'
    }

############################################################################

#running the provided arguement if any. If no argements, display doc

#if len(args)!=0: 
#    i=0
#    while i < len(args):
#        os.system(args[i]+' &')
#        i+=1
#
#else: 
#    doc()

#processing and running
if len(args)!=0:
    cmd = args[0]
#    print cmd
#    func=globals()[cmdlist.get(cmd,exe(cmd))]()
#    getattr(__main__,cmdlist.get(cmd,'exe(cmd+\' &\')'))
    exec cmdlist.get(cmd,'exe(\''+cmd+'\')')

else:
    doc()
